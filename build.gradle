plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'jacoco'
}

group = 'wayc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	snippetsDir = file('build/generated-snippets')
	asciidocVersion = "2.0.6.RELEASE"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	//테스트에서 lombok 사용.
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	//Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	//spring rest docs
	asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor:${asciidocVersion}"
	testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${asciidocVersion}"
	testImplementation 'org.springframework.security:spring-security-test'

	// AWS SES (Mail)
	implementation 'com.amazonaws:aws-java-sdk-ses:1.12.3'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"


	//s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	//jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

}

//--spring rest docs --//

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
	finalizedBy jacocoTestReport // report is always generated after tests run
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

jacocoTestReport { //바이너리 커버리지 결과를 사람이 읽기 좋은 형태의 리포트로 저장.
	dependsOn test // tests are required to run before generating the report
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/KakaoBeanApplication*",
					"**/common*",
					"**/dto*",
					"**/config*",
					"**/security*",
					"**/util*",
					"**/exception*",
					"**/Q*"
			])
		}))
	}
	//테스트 커버리지 결과 파일을 생성을 안함.

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification { //내가 원하는 커버리지 기준을 만족하는지 확인해 주는 task
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			excludes = [
					"**.dto*",
					"**.*KakaoBeanApplication*",
					"**.config*",
					"**.security*",
					"**.exception*",
					"**.util*",
					"**.common*",
					"**.Q*",
					"**.response.*" //임시 설정
			]
		}
	}
}

bootJar {
	dependsOn asciidoctor
//	from ("${asciidoctor.outputDir}") {
//		println ">>>>" + asciidoctor.outputDir //build 파일에 생성된다. static으로 옮겨야함.
//		into 'static/docs'
//	}
	copy { //파일을 복사하는 방법 중 기본적으로 제공되는 Copy 태스크를 이용
		from asciidoctor.outputDir
		into 'src/main/resources/static/docs'
	}
}

//--spring rest docs --//

clean {
	delete file('src/main/generated')
}

jar{
	enabled(false) //plain.jar 생성을 막음.
}
